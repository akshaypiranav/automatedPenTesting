from django.http import HttpResponse, HttpResponseServerError, JsonResponse,FileResponse
from django.views.decorators.csrf import csrf_exempt
import json,random,string,os
from django.core.serializers import serialize
from AutomatedPenTesting import settings 
from .models import *
from django.http import JsonResponse
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from . import utils
from APP import utils
from .task import *
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync

#Login page Validation
@csrf_exempt
def login(request):
    if request.method == 'POST':
        try:
            # Extract data from the request
            data = json.loads(request.body)
            global email
            email = data.get('email')
            print(email)

            password = data.get('password')
            
            # Validate the received data
            if not email or not password:
                return JsonResponse({'success': False, 'error': 'Email and password are required'}, status=400)
            
            try:
                
                user = Register.objects.get(email=email)
            except Register.DoesNotExist:
                return JsonResponse({'success': False, 'error': 'User with this email does not exist'}, status=400)
            
            if user.password == password:
                
                serialized_user = serialize('json', [user,])
                print(serialized_user)
                return JsonResponse({'success': True, 'user': serialized_user})
                
            else:
                return JsonResponse({'success': False, 'error': 'Incorrect password'}, status=400)
        
        except Exception as e:
            # Return an error response if something goes wrong
            return JsonResponse({'error': str(e)}, status=500)
    else:
        # Return a method not allowed error for other HTTP methods
        return JsonResponse({'error': 'Method not allowed'}, status=405)


#Function to valid and Process Registration page
@csrf_exempt
def register(request):
    if request.method == 'POST':
        try:
            # Extract data from the request
            data = json.loads(request.body)
            global name
            name = data.get('name')
            global lastname
            lastname = data.get('lastname')
            email = data.get('email')
            global password
            password = data.get('password')
            print(data)
            
            #Checks All fields are available or not
            if not name or not lastname or not email or not password:
                return JsonResponse({'error': 'All fields are required'}, status=400)
            
            #Checks the FirstName Length 
            if len(name) < 4:
                return JsonResponse({'error': 'Name must be at least 4 characters long'}, status=400)
            
            #Checks wheather the email already in the db or not
            if Register.objects.filter(email=email).exists():
                return JsonResponse({'error': 'Email already exists'}, status=400)
            
            #checks the password length 
            if len(password) < 8 or not any(char in string.punctuation for char in password):
                return JsonResponse({'error': 'Password must be at least 8 characters long and contain at least one special character'}, status=400)
            global otp 
            otp = generate_otp()
            send_otp(email, otp)
            
          
            print(Register.objects.all())
            return JsonResponse({'success': True}, status=201)
        
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    else:
        return JsonResponse({'error': 'Method not allowed'}, status=405)

#Generate OTP for email Validation
def generate_otp(length=6):
    return ''.join(random.choices(string.digits, k=length))

#Send OTP to the given mail using google mail
def send_otp(receiver_email, otp):
    sender_email = "akshaypiranavb@gmail.com"
    subject = "APT LOGIN OTP"
    body = f"Your OTP is: {otp}"
    print(otp)
    message = MIMEMultipart()
    message["From"] = sender_email
    message["To"] = receiver_email
    message["Subject"] = subject
    message.attach(MIMEText(body, "plain"))

    smtp_server = "smtp.gmail.com"
    smtp_port = 587
    smtp_username = "akshaypiranavb@gmail.com"
    smtp_password = "ddld flec vggd ovve"
    
    with smtplib.SMTP(smtp_server, smtp_port) as server:
        server.starttls()
        server.login(smtp_username, smtp_password)
        server.sendmail(sender_email, receiver_email, message.as_string())
        
#Verify the given OTP with our sent OTP
@csrf_exempt
def verify_otp(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            otp1 = data.get('otp')
            email = data.get('email')

            # Check if the OTP provided matches the OTP sent (assuming you have a global variable for sent_otp)
            if otp1==otp:
                user=Register.objects.create(name=name, lastname=lastname, email=email, password=password)
                user.save()
                return JsonResponse({'success': True}, status=200)
            else:
                print("Wrong")
                return JsonResponse({'error': 'Invalid OTP'}, status=400)
        
        except Register.DoesNotExist:
            return JsonResponse({'error': 'User does not exist'}, status=400)
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    else:
        return JsonResponse({'error': 'Method not allowed'}, status=405)    


#To handle the URL from the User
@csrf_exempt
def home(request):

    if request.method == "POST":
        
        # Parse JSON data from the request body
        data = json.loads(request.body)
        url = data.get("url")
        email = data.get("email")
        print(url)

        # Check if email is included in the request
        if "email" not in data:
            return JsonResponse({"error": "Email is required"}, status=400)

        if utils.is_valid_url(url):
            print("AKSHY")
            if utils.check_url_status(url):
                print(utils.check_url_status(url))
                print("going to start")
                ip_for_nmap = utils.get_ip_address(url)
                print(ip_for_nmap)
                url = utils.add_http_protocol(url)
                print("URL : ", url)
                if Register.objects.filter(email=email).exists():
                    user = Register.objects.get(email=email)
                    url_obj = Urls_of_users.objects.create(user=user, url=url, generatedReport=None)
                    url_obj.save()
                    
                    
                    data = {
                'id': url_obj.id,
                'url': url_obj.url,
                'url_status': "Given Recently",
                        }           
                    print(data)
                    print("SAVED THE URL")
                    main.delay(utils.get_ip_address(url), utils.add_http_protocol(url), urlDataId=url_obj.id)
                #returns to the dashboard
                return JsonResponse({"message": "Data received successfully",'data':data})
    
            else:
                data = {
                'id': 'No Id Due to Wrong URL',
                'url': url,
                'url_status': 'The Given URL is Not Valid',
        }                 
                #returns to the dashboard
                return JsonResponse({'message':'Website is Down','data':data})
        else:
            data = {
                'id': 'No Id Due to Wrong URL',
                'url': url,
                'url_status': 'The Given URL is Not Valid',
        } 
            #returns to the dashboard
            return JsonResponse({'message':'Invalid URL','data':data})

          

    else:
        #Handles Requests
        return JsonResponse({"error": "Only POST requests are allowed"}, status=405)
 
#To get the User Previous Url from the DB and shown in the Dashboard   
@csrf_exempt
def get_urls_of_users(request):
    if request.method == 'POST':
        try:
            request_data = json.loads(request.body)
            email = request_data.get('email')

            if Register.objects.filter(email=email).exists():
                user = Register.objects.get(email=email)

                if Urls_of_users.objects.filter(user_id=user.id).exists():
                    data = Urls_of_users.objects.filter(user_id=user.id)
                    data = [{'link': url.url, 'status': url.url_status, 'result': 'Completed', 'reportUrl': url.generatedReport.url if url.generatedReport else None} for url in data]
                    return JsonResponse(data, safe=False)
                else:
                    # Return a message indicating that no URLs were found for the user
                    return JsonResponse({'message': 'No URLs found for this user'}, status=200)
            else:
                return JsonResponse({'error': 'Email not found'}, status=404)
        except json.JSONDecodeError:
            return JsonResponse({'error': 'Invalid JSON data in the request'}, status=400)
    elif request.method == 'GET':
        try:
            # Fetch data for GET request
            
            data = Urls_of_users.objects.all()
            data = [{'link': url.url, 'status': url.url_status, 'result': 'Completed', 'reportUrl': url.generatedReport.url if url.generatedReport else None} for url in data]
            return JsonResponse(data, safe=False)
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    else:
        return JsonResponse({'error': 'Unsupported method'}, status=405)

@csrf_exempt
def download_pdf(request, file_path):
    # Construct the absolute file path
    file_path = os.path.join(settings.MEDIA_ROOT, file_path)
    
    # Check if the file exists or not
    if os.path.exists(file_path):
        # Open the file for reading 
        with open(file_path, 'rb') as f:
            response = FileResponse(f)
            response['Content-Disposition'] = 'attachment; filename="{}"'.format(os.path.basename(file_path))
            return response
    else:
        return HttpResponse("File not found", status=404)

#To fetch the PDF
@csrf_exempt
def fetch_pdf(request, filename):
    # Construct the full path to the PDF file
    pdf_path = os.path.join('E:/AutomatedPenTesting/media/media/', filename)
    print(pdf_path)
    try:
        # Validate file_path
        if not os.path.exists(pdf_path):
            return HttpResponse("File not found", status=404)
        # Open the file in binary mode
        file_handle = open(pdf_path, 'rb')

        # Return the file as a response
        return FileResponse(file_handle)
    except Exception as e:
        return HttpResponseServerError("An error occurred: {}".format(str(e)))
    


#Handles the download request
@csrf_exempt
def download_pdf(request, filename):
    # Construct the full path to the PDF file
    pdf_path = os.path.join('E:/AutomatedPenTesting/media/media/', filename)
    
    try:
        # Validate file_path here
        if not os.path.exists(pdf_path):
            return HttpResponse("File not found", status=404)

        # Open the file in binary mode
        file_handle = open(pdf_path, 'rb')

        # Create a FileResponse object with the file handle
        response = FileResponse(file_handle)

        response['Content-Type'] = 'application/pdf'

        response['Content-Disposition'] = 'attachment; filename="{0}"'.format(os.path.basename(pdf_path))

        return response
    except Exception as e:
        return HttpResponseServerError("An error occurred: {}".format(str(e)))



@csrf_exempt
def receive_data_from_react(request):
    if request.method == 'POST':
        try:
            # Parse JSON data from the request body
            data_from_react = json.loads(request.body)
            # Process the data as needed
            print("Received data from React:", data_from_react)

            response_data = {'status': 'Data received successfully'}
            return JsonResponse(response_data)
        except json.JSONDecodeError as e:
            return JsonResponse({'error': str(e)}, status=400)
    else:
        return JsonResponse({'error': 'Only POST requests are allowed'}, status=405)

from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import requests

#Sends the Status Request
@csrf_exempt
def send_status_to_react(request, status):

    url_data_dict = {
        'url_status': status,
        # Add other fields from urlData as needed
    }

    # Send the data to React endpoint
    react_endpoint_url = f'http://localhost:3000/api/receive-data'
    try:
        response = requests.post(react_endpoint_url, json=url_data_dict)
        response.raise_for_status()
        return JsonResponse({'success': True})
    except requests.RequestException as e:
        return JsonResponse({'error': str(e)}, status=500)

from django.http import JsonResponse

from .models import Urls_of_users

def update_url_status(request):
    if request.method == 'POST':
        # Assuming you're receiving data in the request
        # For simplicity, let's assume you're passing user_id and new_status in the request data
        user_id = Urls_of_users.objects.get(user_id=user_id).first()
        print(user_id)
        new_status = 'Scheduled'
        
        # Update the url_status in the database
        try:
            url_obj = Urls_of_users.objects.get(user_id=user_id).first()
            url_obj.url_status = new_status
            url_obj.save()
            
            # Broadcast the updated status to the WebSocket group
            channel_layer = get_channel_layer()
            async_to_sync(channel_layer.group_send)(
                'url_status_updates',
                {
                    'type': 'send_url_status',
                    'data': {
                        'user_id': user_id,
                        'url_status': new_status
                    }
                }
            )
            
            return JsonResponse({'status': 'success'})
        except Urls_of_users.DoesNotExist:
            return JsonResponse({'status': 'error', 'message': 'User does not exist'})
    else:
        return JsonResponse({'status': 'error', 'message': 'Invalid request method'})
    
    
    
#API Creation for other websites
@csrf_exempt
def api(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            emailValue = data.get('email')
            passwordValue=data.get("password")
            urlValue=data.get("url")
            print(emailValue,passwordValue,urlValue)
            return JsonResponse({'success':'done'})
        except Exception as e:
            return JsonResponse({'error': 'Method not allowed'}, status=405) 
    else:
        return JsonResponse({'error': 'Method not allowed'}, status=405) 
       

#Sends data to the Profile
@csrf_exempt
def profile(request):
    if request.method == 'POST':
        # Assuming you're expecting JSON data
        try:
            data = json.loads(request.body)
            email = data.get('email')
            json_data = json.loads(email)
            email_address = json_data.get("email")
            print(email_address)  # Print the email value
            if Register.objects.filter(email=email_address).exists():
                profile_value = Register.objects.get(email=email_address)
                name_value=profile_value.name
                lastname_value=profile_value.lastname
                email_value=profile_value.email
                password_value=profile_value.password
                return JsonResponse({'success': 'value sent','name':name_value,'lastname':lastname_value,'email':email_value,'password':password_value})
        except json.JSONDecodeError:
            return JsonResponse({'error': 'Invalid JSON data'}, status=400)
    else:
        return JsonResponse({'error': 'Only POST requests are allowed'}, status=405)
    

#Sets the update of the profile to the DB
@csrf_exempt
def update(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            email = data.get('email')
            print(email)
            password = data.get('password')
            firstname = data.get('firstname')
            lastname = data.get('lastname')
            
            # Fetch the user profile from the database
            profile = Register.objects.get(email=email)
            print(profile)
            if profile:
                
            # Update the profile with the new values
                profile.password = password
                profile.name = firstname
                profile.lastname = lastname
                profile.email=email
                profile.save()
            else:
                print('cannot fetch')# Save the changes to the database
            
            return JsonResponse({'success': 'Profile updated successfully'})
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=400)
    else:
        return JsonResponse({'error': 'Only POST requests are allowed'}, status=405)
    

#To delete the account
@csrf_exempt
def delete(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            email = data.get('email')

            # Check if the email exists in the database
            if Register.objects.filter(email=email).exists():
                # If the email exists, delete the corresponding record
                Register.objects.get(email=email).delete()
                return JsonResponse({'success': 'Account deleted successfully'})
            else:
                # If the email does not exist, return a failure message
                return JsonResponse({'error': 'Account not found'}, status=404)
        except Exception as e:
            # If there's any other exception, return a generic error message
            return JsonResponse({'error': 'An error occurred while deleting the account'}, status=500)
    else:
        # If the request method is not POST, return a method not allowed error
        return JsonResponse({'error': 'Method not allowed'}, status=405)
